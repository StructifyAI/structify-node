// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'structifyai-mcp/filtering';
import { Metadata, asTextContentResult } from 'structifyai-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Structify from 'structifyai';

export const metadata: Metadata = {
  resource: 'datasets',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/dataset/info',
  operationId: 'dataset_info',
};

export const tool: Tool = {
  name: 'get_datasets',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nGrab a dataset by its name.\n\n# Response Schema\n```json\n{\n  allOf: [    {\n      $ref: '#/$defs/dataset_descriptor'\n    }\n  ],\n  description: 'A dataset is where you put multiple referential schemas.\\n\\nA dataset is a complete namespace where all references between schemas\\nare held within the dataset.',\n  $defs: {\n    dataset_descriptor: {\n      type: 'object',\n      description: 'A dataset is where you put multiple referential schemas.\\n\\nA dataset is a complete namespace where all references between schemas\\nare held within the dataset.',\n      properties: {\n        description: {\n          type: 'string'\n        },\n        name: {\n          type: 'string'\n        },\n        relationships: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              description: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              source_table: {\n                type: 'string'\n              },\n              target_table: {\n                type: 'string'\n              },\n              merge_strategy: {\n                $ref: '#/$defs/relationship_merge_strategy'\n              },\n              properties: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    description: {\n                      type: 'string'\n                    },\n                    name: {\n                      type: 'string'\n                    },\n                    merge_strategy: {\n                      $ref: '#/$defs/strategy'\n                    },\n                    prop_type: {\n                      $ref: '#/$defs/property_type'\n                    }\n                  },\n                  required: [                    'description',\n                    'name'\n                  ]\n                }\n              }\n            },\n            required: [              'description',\n              'name',\n              'source_table',\n              'target_table'\n            ]\n          }\n        },\n        tables: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/table'\n          }\n        },\n        llm_override_field: {\n          type: 'string'\n        }\n      },\n      required: [        'description',\n        'name',\n        'relationships',\n        'tables'\n      ]\n    },\n    relationship_merge_strategy: {\n      type: 'object',\n      properties: {\n        source_cardinality_given_target_match: {\n          type: 'integer',\n          description: 'Describes the expected cardinality of the source table when a match is found in the target table\\n\\nFor example, if we have a source company and a target funding round, we expect the source company\\nto appear in multiple funding rounds, but not *too* many.\\nSo if we have a funding round match, the expected number of unique companies is relatively small.\\nThis is an estimate of that number.'\n        },\n        target_cardinality_given_source_match: {\n          type: 'integer',\n          description: 'Describes the expected cardinality of the target table when a match is found in the source table\\n\\nFor example, if we have a source company and a target funding round, we usually expect\\nsome number of funding rounds to be associated with a single company but not *too* many.\\nSo if we have a company match, the expected number of unique funding rounds is relatively small.\\nThis is an estimate of that number.'\n        }\n      },\n      required: []\n    },\n    strategy: {\n      anyOf: [        {\n          type: 'string',\n          enum: [            'Unique',\n            'NoSignal'\n          ]\n        },\n        {\n          type: 'object',\n          properties: {\n            Probabilistic: {\n              $ref: '#/$defs/merge_config'\n            }\n          },\n          required: [            'Probabilistic'\n          ]\n        }\n      ]\n    },\n    merge_config: {\n      type: 'object',\n      description: 'The configuration for a probabilistic merge strategy',\n      properties: {\n        baseline_cardinality: {\n          type: 'integer',\n          description: 'The number of unique values that are expected to be present in the complete dataset\\n\\nThis is used for merging to determine how significant a match is. (i.e. if there are\\nonly 2 possible values, a match gives less confidence than if there are 100)'\n        },\n        match_transfer_probability: {\n          type: 'number',\n          description: 'The estimated probability that, given an entity match, the properties also match\\n\\nFor a person\\'s full name, this would be quite high. For a person\\'s job title, it\\nwould be lower because people can have multiple job titles over time or at different\\ncompanies at the same time.'\n        },\n        comparison_strategy: {\n          type: 'string',\n          enum: [            'Default',\n            'EnforceUniqueness'\n          ]\n        }\n      },\n      required: [        'baseline_cardinality',\n        'match_transfer_probability'\n      ]\n    },\n    property_type: {\n      anyOf: [        {\n          type: 'string',\n          enum: [            'String',\n            'Boolean',\n            'Integer',\n            'Float',\n            'Date',\n            'URL',\n            'Money',\n            'Image',\n            'PersonName',\n            'Address'\n          ]\n        },\n        {\n          type: 'object',\n          properties: {\n            Enum: {\n              type: 'array',\n              items: {\n                type: 'string'\n              }\n            }\n          },\n          required: [            'Enum'\n          ]\n        }\n      ]\n    },\n    table: {\n      type: 'object',\n      description: 'The full definition of what a schema is - without duplicate information.',\n      properties: {\n        description: {\n          type: 'string'\n        },\n        name: {\n          type: 'string',\n          description: 'Organized in a name, description format.'\n        },\n        properties: {\n          type: 'array',\n          description: 'Organized in a name, description format.',\n          items: {\n            type: 'object',\n            properties: {\n              description: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              merge_strategy: {\n                $ref: '#/$defs/strategy'\n              },\n              prop_type: {\n                $ref: '#/$defs/property_type'\n              }\n            },\n            required: [              'description',\n              'name'\n            ]\n          }\n        },\n        expected_cardinality: {\n          type: 'integer',\n          description: 'Expected number of unique values in the complete dataset.\\n\\nThis is used for our probabilistic merge strategy.'\n        },\n        primary_column: {\n          type: 'string'\n        }\n      },\n      required: [        'description',\n        'name',\n        'properties'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      name: {
        type: 'string',
        description: 'Information about the dataset',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Structify, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await maybeFilter(args, await client.datasets.get(body)));
};

export default { metadata, tool, handler };
